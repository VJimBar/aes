package es.clave.sp.actions;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Iterator;
import java.util.Properties;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.opensaml.saml2.core.LogoutResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import es.clave.sp.AbstractSPServlet;
import es.clave.sp.ApplicationSpecificServiceException;
import es.clave.sp.Constants;
import es.clave.sp.SPUtil;
import es.clave.sp.SessionHolder;
import es.clave.sp.SpProtocolEngineFactory;
import eu.eidas.auth.commons.EidasErrorKey;
import eu.eidas.auth.commons.EidasErrors;
import eu.eidas.auth.commons.EidasParameterKeys;
import eu.eidas.auth.commons.EidasStringUtil;
import eu.eidas.auth.commons.attribute.AttributeDefinition;
import eu.eidas.auth.commons.attribute.AttributeValue;
import eu.eidas.auth.commons.exceptions.InvalidParameterEIDASException;
import eu.eidas.auth.commons.protocol.IAuthenticationResponseNoMetadata;
import eu.eidas.auth.engine.ProtocolEngineNoMetadataI;
import eu.eidas.auth.engine.xml.opensaml.SAMLEngineUtils;
import eu.eidas.auth.engine.xml.opensaml.SecureRandomXmlIdGenerator;
import eu.eidas.engine.exceptions.EIDASSAMLEngineException;

/**
 * This Action receives a SAML Response, shows it to the user and then validates it getting the attributes values
 */
public class ReturnAction extends AbstractSPServlet {

	private static final long serialVersionUID = 3660074009157921579L;

	private static final String SAML_VALIDATION_ERROR = "Could not validate token for Saml Response";

	static final Logger logger = LoggerFactory.getLogger(IndexAction.class.getName());

	private final ProtocolEngineNoMetadataI protocolEngine = 
			SpProtocolEngineFactory.getSpProtocolEngine(Constants.SP_CONF);

	private String SAMLResponse = null;
	private String logoutResponse = null;
	private ImmutableMap<AttributeDefinition<?>, ImmutableSet<? extends AttributeValue<?>>> attrMap = null;
	private Properties configs = null;

	@Override
	protected Logger getLogger() {
		return logger;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		if (acceptsHttpRedirect()) {
			doPost(request, response);
		} else {
			logger.warn("BUSINESS EXCEPTION : redirect binding is not allowed");
			System.out.print("BUSINESS EXCEPTION : redirect binding is not allowed");
		}
	}

	/**
	 * Post method
	 *
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		SAMLResponse = request.getParameter("SAMLResponse");
		logoutResponse = request.getParameter("logoutResponse");
		String relayState = request.getParameter("RelayState");
		RequestDispatcher dispatcher = null;
		if (SAMLResponse != null && !SAMLResponse.trim().isEmpty()) {
			configs = SPUtil.loadSPConfigs();
			byte[] decSamlToken = EidasStringUtil.decodeBytesFromBase64(SAMLResponse);
			IAuthenticationResponseNoMetadata authnResponse = null;
			try {
				//validate SAML Token
				authnResponse = protocolEngine.unmarshallResponseAndValidate(decSamlToken, request.getRemoteHost(), 0, 0, 
						configs.getProperty(Constants.SP_RETURN));

				// For extract an encrypted Assertion from SAMLResponse, that can be signed itself
				//           	boolean encryptedResponse = SPUtil.isEncryptedSamlResponse(decSamlToken);
				//           	if (encryptedResponse) {
				//          		byte[] eidasTokenSAML = engine.checkAndDecryptResponse(decSamlToken);
				//              	SPUtil.extractAssertionAsString(EidasStringUtil.toString(eidasTokenSAML));
				//            	}

				// Check session
				String prevRelayState = SessionHolder.sessionsSAML.get(authnResponse.getInResponseToId());
				if (prevRelayState == null || !prevRelayState.equals(relayState)) {
					throw new EIDASSAMLEngineException("La respuesta recibida no corresponde con ninguna "
							+ "request o no coincide el RelayState");
				}
			} catch (EIDASSAMLEngineException e) {
				logger.error(e.getMessage(), e);
				request.setAttribute("Title","SAML_VALIDATION_ERROR");
				request.setAttribute("Message", e.getMessage());

				String dateTime= DateTimeFormatter.ofPattern("dd/MM/yy hh:mm:ss").format(LocalDateTime.now());
				request.setAttribute("Date", dateTime);

				dispatcher = request.getRequestDispatcher("/errorPage.jsp");
				dispatcher.forward(request, response);

				throw new ApplicationSpecificServiceException(SAML_VALIDATION_ERROR, e.getMessage());
			}

			if (authnResponse.isFailure()) {
				request.setAttribute("Title","Saml Response is fail");
				request.setAttribute("Message", authnResponse.getStatusMessage());

				String dateTime= DateTimeFormatter.ofPattern("dd/MM/yy hh:mm:ss").format(LocalDateTime.now());
				request.setAttribute("Date", dateTime);

				dispatcher = request.getRequestDispatcher("/errorPage.jsp");
				dispatcher.forward(request, response);

				throw new ApplicationSpecificServiceException("Saml Response is fail", authnResponse.getStatusMessage());
			} else {
				attrMap = authnResponse.getAttributes().getAttributeMap();
			}

			request.setAttribute("attrMap", attrMap);

			int i=0;

			for(Iterator<ImmutableSet<? extends AttributeValue<?>>> itr2 = attrMap.values().iterator(); itr2.hasNext();) 
			{
				ImmutableSet<? extends AttributeValue<?>> attr=itr2.next();

				if(attrMap.keySet().asList().get(i).getFriendlyName().toString().equals("PersonIdentifier")) 

				{	
					String clave=encrypAES(attr.toString().replace("[","").replace("]",""), "clave_secreta_OV");
					request.setAttribute("ID", clave);
				}

				i++;
			}


			dispatcher = request.getRequestDispatcher("/returnPage.jsp");

			//logout data
			String samlId = SAMLEngineUtils.generateNCName();
			request.setAttribute("logoutRequest", generateLogout(configs.getProperty(Constants.SP_RETURN),
					configs.getProperty(Constants.PROVIDER_NAME), 
					configs.getProperty("service.url"),
					samlId));
			String nonce = SecureRandomXmlIdGenerator.INSTANCE.generateIdentifier(8);
			SessionHolder.sessionsSAML.put(nonce, samlId);
			request.setAttribute("RelayState", nonce);
			request.setAttribute("nodeServiceUrl", configs.getProperty("service.url"));
			request.setAttribute(EidasParameterKeys.BINDING.toString(), getRedirectMethod());

			final HttpSession session = request.getSession();
			session.setAttribute("samlId", samlId); //$NON-NLS-1$
			session.setAttribute("RelayState", nonce); //$NON-NLS-1$
			session.setAttribute("nodeServiceUrl", configs.getProperty("service.url")); //$NON-NLS-1$
			session.setAttribute(EidasParameterKeys.BINDING.toString(), getRedirectMethod()); //$NON-NLS-1$
			session.setAttribute("logoutRequest", generateLogout(configs.getProperty(Constants.SP_RETURN),
					configs.getProperty(Constants.PROVIDER_NAME), 
					configs.getProperty("service.url"),
					samlId));

			System.out.print("\n" + "samlId: " + samlId);
			System.out.print("\n" + "RelayState: " + nonce);
			System.out.print("\n" + "nodeServiceUrl: " + configs.getProperty("service.url"));
			System.out.print("\n" + EidasParameterKeys.BINDING.toString() + ": " +  getRedirectMethod() + "\n");

			dispatcher.forward(request, response);


		} else if (logoutResponse != null && !logoutResponse.trim().isEmpty()) {


			// Se valida la request recibida del SP			
			if (logger.isDebugEnabled()) {
				logger.debug("Se procede a validar una respuesta de logout recibida desde un IdP");
				logger.debug("Respuesta a validar: " + response);
			}
			LogoutResponse logoutResp = null;
			try {
				byte[] decSamlToken = EidasStringUtil.decodeBytesFromBase64(logoutResponse);
				//validate SAML Token
				logoutResp = protocolEngine.unmarshallLogoutResponseAndValidate(decSamlToken, 
						request.getRemoteHost(), 0, 0, configs.getProperty(Constants.SP_RETURN));

			} catch (EIDASSAMLEngineException e) {
				logger.error("No se pudo validar la respuesta", e);
				request.setAttribute("Title","SAML_VALIDATION_ERROR");
				request.setAttribute("Message", e.getMessage());

				String dateTime= DateTimeFormatter.ofPattern("dd/MM/yy hh:mm:ss").format(LocalDateTime.now());
				request.setAttribute("Date", dateTime);

				dispatcher = request.getRequestDispatcher("/errorPage.jsp");
				dispatcher.forward(request, response);

				throw new ApplicationSpecificServiceException(SAML_VALIDATION_ERROR, e.getMessage());
			} catch (Exception e) {
				logger.error("No se pudo validar la respuesta", e);
				request.setAttribute("Title","SAML_VALIDATION_ERROR");
				request.setAttribute("Message", e.getMessage());

				String dateTime= DateTimeFormatter.ofPattern("dd/MM/yy hh:mm:ss").format(LocalDateTime.now());
				request.setAttribute("Date", dateTime);

				dispatcher = request.getRequestDispatcher("/errorPage.jsp");
				dispatcher.forward(request, response);
				throw new ApplicationSpecificServiceException(SAML_VALIDATION_ERROR, e.getMessage());
			}

			logger.info("Saml LogoutResponse is SUCCESS", logoutResp.getStatus());		

			// Check session
			String requestSamlId = SessionHolder.sessionsSAML.get(relayState);
			if (requestSamlId == null || !requestSamlId.equals(logoutResp.getInResponseTo())) {
				throw new InvalidParameterEIDASException("La respuesta recibida no corresponde con ninguna "
						+ "request o no coincide el RelayState");
			}

			final HttpSession session = request.getSession(true);
			session.setAttribute("samlId", null); //$NON-NLS-1$
			// Se redirige al usuario
			response.sendRedirect("https://aplicaciones-pre.aviacion.fomento.es/sancionadoresov/SancionesAESA/Tramitador/ExpSancOficinaVirtual.nsf/fInicioTramiteOnline?OpenForm#");
		} else {
			logger.error("Se ha recibido una respuesta vacia");
			throw new InvalidParameterEIDASException(
					EidasErrors.get(EidasErrorKey.COLLEAGUE_RESP_INVALID_SAML.errorCode()),
					EidasErrors.get(EidasErrorKey.COLLEAGUE_RESP_INVALID_SAML.errorMessage()));
		}

		//dispatcher.forward(request, response);
	}

	private String generateLogout(String assertionConsumerUrl, String providerName, 
			String destination, String nonce) {
		try {
			final byte[] token = protocolEngine.generateLogoutRequestMessage(assertionConsumerUrl, providerName,
					destination, nonce);
			return EidasStringUtil.encodeToBase64(token);
		} catch (EIDASSAMLEngineException e) {
			logger.error(e.getMessage());
			logger.error("", e);

			throw new ApplicationSpecificServiceException("Could not generate token for Saml Request",
					e.getMessage());
		}
	}

	/**
	 * Method to be used by configuration. See sp.properties -> redirect.method key.
	 *  This allows to be able to function eihter in
	 * EIDAS or STORK mode respectively.
	 *
	 * @return a redirect method
	 */
	public String getRedirectMethod() {
		String ret = "post";
		if (configs.containsKey(Constants.REDIRECT_METHOD)) {
			ret = configs.getProperty(Constants.REDIRECT_METHOD);
			if (ret == null || ret.trim().isEmpty() || !(ret.equals("post") || ret.equals("get"))) {
				logger.error("La variable de configuración redirect.method no contiene un valor adecuado: " + ret);
				ret = "post";
			}
		}
		return ret;
	}

	private static String encrypAES(String input, String secretKey)
	{

		try {

			SecretKeySpec secretKeySpec= new SecretKeySpec(secretKey.getBytes(StandardCharsets.UTF_8), "AES");

			Cipher cipher=Cipher.getInstance("AES");
			cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
			byte[] encryptedBytes=cipher.doFinal(input.getBytes(StandardCharsets.UTF_8));
			return Base64.getEncoder().encodeToString(encryptedBytes);

		}
		catch(Exception e) {

			e.printStackTrace();

		}


		return null;
	}
}