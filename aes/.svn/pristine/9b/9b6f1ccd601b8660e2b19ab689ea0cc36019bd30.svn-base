package es.clave.sp.actions;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import es.clave.sp.AbstractSPServlet;
import es.clave.sp.Constants;
import es.clave.sp.SPUtil;
import es.clave.sp.SessionHolder;
import eu.eidas.auth.commons.EidasParameterKeys;

/**
 *  This Action Generates a SAML Request with the data given by the user, then sends it to the selected node
 */
public class PopulateAction extends AbstractSPServlet {

	private static final long serialVersionUID = 3660074009157921579L;

	private static final Logger LOGGER = LoggerFactory.getLogger(PopulateAction.class);

	private static Properties configs;
	private static String nodeServiceUrl;
	private static String providerName;
	private static String spApplication;
	private static String returnUrl;

	private static void loadGlobalConfig() {
		configs = SPUtil.loadSPConfigs();
		nodeServiceUrl = configs.getProperty("service.url");
		providerName = configs.getProperty(Constants.PROVIDER_NAME);
		spApplication = configs.getProperty(Constants.SP_APLICATION);
		returnUrl = configs.getProperty(Constants.SP_RETURN);
	}    

	@Override
	protected Logger getLogger() {
		return LOGGER;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	/**
	 * Post method
	 *
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PopulateAction.loadGlobalConfig();

		Date date=new Date();
		System.out.print(date +" Llamada al metodo post" + "\n");

		if (request.getSession(false)!=null){ 

			final HttpSession session = request.getSession(false);
			
			System.out.print(date + " samlId " + (String) session.getAttribute("samlId") + "\n");
			
			if((String) session.getAttribute("samlId")!=null) {
				final String samlId = (String) session.getAttribute("samlId"); //$NON-NLS-1$
				final String relayState = (String) session.getAttribute("RelayState"); //$NON-NLS-1$
				final String nodeServiceUrl = (String) session.getAttribute("nodeServiceUrl"); //$NON-NLS-1$
				final String binding = (String) session.getAttribute("binding"); //$NON-NLS-1$
				final String logoutRequest = (String) session.getAttribute("logoutRequest"); //$NON-NLS-1$
				
				request.setAttribute("samlId", samlId);
				request.setAttribute("RelayState", relayState);
				request.setAttribute("nodeServiceUrl", nodeServiceUrl);
				request.setAttribute("binding", binding);
				request.setAttribute("logoutRequest", logoutRequest);
				RequestDispatcher dispatcher = request.getRequestDispatcher("/logout.jsp");
				dispatcher.forward(request, response);
			}
			else 
			{
				request.setAttribute("providerName", providerName);
				request.setAttribute("spApplication", spApplication);
				request.setAttribute("returnUrl", returnUrl);
				request.setAttribute("nodeServiceUrl", nodeServiceUrl);
				request.setAttribute(EidasParameterKeys.BINDING.toString(), getRedirectMethod());			
				RequestDispatcher dispatcher = request.getRequestDispatcher("/selectAttributes.jsp");
				dispatcher.forward(request, response);
			}

		}
		else 
		{
			request.setAttribute("providerName", providerName);
			request.setAttribute("spApplication", spApplication);
			request.setAttribute("returnUrl", returnUrl);
			request.setAttribute("nodeServiceUrl", nodeServiceUrl);
			request.setAttribute(EidasParameterKeys.BINDING.toString(), getRedirectMethod());
			RequestDispatcher dispatcher = request.getRequestDispatcher("/selectAttributes.jsp");
			dispatcher.forward(request, response);
		}

	}

	public String getProviderName() {
		return providerName;
	}

	public String getReturnUrl() {
		return returnUrl;
	}

	//    public void setReturnUrl(String url) {
	//        returnUrl = url;
	//    }

	/**
	 * Method to be used by configuration. See sp.properties -> redirect.method key.
	 *  This allows to be able to function eihter in
	 * EIDAS or STORK mode respectively.
	 *
	 * @return a redirect method
	 */
	public String getRedirectMethod() {
		String ret = "post";
		if (configs.containsKey(Constants.REDIRECT_METHOD)) {
			ret = configs.getProperty(Constants.REDIRECT_METHOD);
			if (ret == null || ret.trim().isEmpty() || !(ret.equals("post") || ret.equals("get"))) {
				LOGGER.error("La variable de configuraci√≥n redirect.method no contiene un valor adecuado: " + ret);
				ret = "post";
			}
		}
		return ret;
	}
}
